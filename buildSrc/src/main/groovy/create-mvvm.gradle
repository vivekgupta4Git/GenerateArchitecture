import com.squareup.kotlinpoet.FileSpec
import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.provider.Property
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.SourceSetContainer
import org.gradle.api.tasks.TaskAction

abstract class GenerateMvvm extends DefaultTask{

    @TaskAction
    void action(){
        println(project.extensions["mvvmGreeting"].properties["message"].get()) //using map getter

        def androidExtension = project.extensions.findByName("android") //either use findByName or use map getter method
            def mainSourceDirectory
            project.android.sourceSets.each {
                sourceSet ->
                    if(sourceSet.name.startsWith("main")) {
                        for (File file : sourceSet.java.getSrcDirs())
                            if (file.exists()) {
                                def namespaceCollection = androidExtension.properties.get("namespace").split('\\.')
                                def namespace = ""
                                namespaceCollection.each { part ->
                                    namespace = namespace + "/$part"
                                }
                                mainSourceDirectory = "$file.path" + "${namespace}"
                                break
                            }
                    }
            }
            if(mainSourceDirectory){
                def dir = new File(mainSourceDirectory)
                def packageName = androidExtension.properties.get("namespace").toString()
                def fileSpec = FileSpec.builder(packageName,"GradleLovesKotlinPoet").build()
                def kotlinFile = new File(dir,"GradleLovesKotlinPoet.kt")
                kotlinFile.withWriter('UTF-8'){
                    writer ->
                        fileSpec.writeTo(writer)
                }
            }
            else {
                println("unable to find the android main source set")
            }
    }
}


abstract class Mvvm implements Plugin<Project>{
    @Override
    void apply(Project project) {
                def mvvmPluginExtensionDefaultValue =project.extensions.create("mvvmGreeting",MvvmPluginExtension)
                project.tasks.register("mvvm",GenerateMvvm.class){
               group = "Architecture Plugin"
               description = "Generate directory structure according to Mvvm Architecture"
                mvvmPluginExtensionDefaultValue.message.convention("Hi from mvvm with Default value !!")
            }
    }
}


interface MvvmPluginExtension{
    Property<String> getMessage()
}